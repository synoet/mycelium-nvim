local lush = require('lush')
local hsl = lush.hsl

local colors = {
  bg = hsl(210, 4, 9),
  bg_0 = hsl(210, 6, 10),
  bg_1 = hsl(210, 6, 12),
  bg_2 = hsl(210, 6, 14),
  bg_3 = hsl(210, 6, 18),
  bg_4 = hsl(210, 6, 21),
  bg_5 = hsl(210, 6, 24),

  red = hsl(359, 68, 70),
  orange = hsl(11, 81, 68),
  orange_dim = hsl(11, 60, 70),
  yellow = hsl(40, 95, 74),
  green_dim = hsl(150, 60, 60),
  blue_dim = hsl(200, 70, 70),
  blue_bright = hsl(190, 90, 70),
  green_bright = hsl(150, 70, 70),
  purple = hsl(280, 60, 80),

  fg = hsl(21, 100, 80),
  fg_0 = hsl(30, 15, 90),
  fg_1 = hsl(30, 10, 75),
  fg_2 = hsl(30, 5, 60),
  fg_3 = hsl(30, 5, 35),
}

---@diagnostic disable: undefined-global
local theme = lush(function(injected_functions)
  local sym = injected_functions.sym
  return {
    ------------------------------
    -- Base
    ------------------------------
    Normal       { bg = colors.bg, fg = colors.fg_1 },
    NormalFloat  { bg = colors.bg, fg = colors.fg_1 },
    FloatBorder  { bg = colors.bg_0, fg = colors.fg_2 },
    FloatTitle   { bg = colors.bg_0, fg = colors.fg_2 },
    NormalNC     { bg = colors.bg, fg = colors.fg_3 },
    ------------------------------
    -- Line numbers and sign column
    ------------------------------
    LineNr       { fg = colors.fg_3 },
    CursorLineNr { fg = colors.green_bright },
    SignColumn   { bg = colors.bg },
    -- UI elements
    Cursor       { bg = colors.fg, fg = colors.bg },
    CursorLine   { bg = colors.bg_0 },
    ColorColumn  { bg = colors.bg_0 },
    VertSplit    { fg = colors.fg_3, bg = colors.bg },
    WinSeparator { fg = colors.fg_3 },
    TabLine      { bg = colors.bg_0, fg = colors.fg_2 },
    TabLineFill  { bg = colors.bg },
    TabLineSel   { bg = colors.bg_1, fg = colors.orange },
    Title        { fg = colors.fg, gui = "bold" },
    Pmenu        { bg = colors.bg, fg = colors.fg_1 },
    PmenuSel     { bg = colors.bg, fg = colors.fg_0 },
    PmenuSbar    { bg = colors.bg_2 },
    PmenuThumb   { bg = colors.fg_3 },
    Folded       { bg = colors.bg_0, fg = colors.blue_bright },
    FoldColumn   { fg = colors.fg_3, bg = colors.bg },
    Search       { bg = colors.bg_3 },
    IncSearch    { bg = colors.green_dim, fg = colors.bg },
    Visual       { bg = colors.bg_3 },
    VisualNOS    { bg = colors.bg_2 },
    StatusLine   { bg = colors.bg_1, fg = colors.fg_1 },
    StatusLineNC { bg = colors.bg_0, fg = colors.fg_2 },
    ErrorMsg     { fg = colors.red },
    WarningMsg   { fg = colors.orange },
    MoreMsg      { fg = colors.green_bright },
    Question     { fg = colors.blue_bright },
    SpellBad     { sp = colors.red, undercurl = true },
    SpellCap     { sp = colors.blue_accent, undercurl = true },
    SpellLocal   { sp = colors.orange, undercurl = true },
    SpellRare    { sp = colors.green_bright, undercurl = true },
    DiffAdd      { bg = colors.green_dim.da(60)},
    DiffChange   { bg = colors.blue_dim.da(60)},
    DiffDelete   { bg = colors.red.da(60).li(0).de(0)},
    DiffText     { bg = colors.blue_dim.da(40)},
    Comment      { fg = colors.fg_3.li(20) },
    Constant     { fg = colors.blue_dim },
    String       { fg = colors.yellow },
    Character    { fg = colors.green_dim },
    Number       { fg = colors.purple },
    Boolean      { fg = colors.purple },
    Float        { fg = colors.fg },
    Identifier   { fg = colors.fg_1 },
    Function     { fg = colors.green_bright },
    Statement    { fg = colors.orange },
    Conditional  { fg = colors.green_bright },
    Repeat       { fg = colors.green_bright },
    Label        { fg = colors.green_bright },
    Operator     { fg = colors.fg_0 },
    Keyword      { fg = colors.orange },
    Exception    { fg = colors.red },
    PreProc      { fg = colors.orange },
    Include      { fg = colors.green_bright },
    Define       { fg = colors.green_bright },
    Macro        { fg = colors.purple },
    PreCondit    { fg = colors.orange },
    Type         { fg = colors.fg },
    StorageClass { fg = colors.blue_bright },
    Structure    { fg = colors.fg },
    Typedef      { fg = colors.blue_bright },
    Special      { fg = colors.yellow },
    SpecialChar  { fg = colors.yellow },
    Tag          { fg = colors.orange_dim},
    Delimiter    { fg = colors.fg_2 },
    SpecialComment { fg = colors.blue_bright },
    Debug        { fg = colors.orange },
    Underlined   { gui = "underline" },
    Bold         { gui = "bold" },
    Italic       { gui = "italic" },
    Error        { fg = colors.red },
    Todo         { fg = colors.bg, bg = colors.orange },
    sym"@attribute"      { fg = colors.green_dim },
    sym"@boolean"        { Boolean },
    sym"@character"      { Character },
    sym"@comment"        { Comment },
    sym"@conditional"    { Conditional },
    sym"@constant"       { Constant },
    sym"@constant.builtin" { fg = colors.blue_accent },
    sym"@constant.macro" { Macro },
    sym"@constructor"    { fg = colors.green_bright },
    sym"@error"          { Error },
    sym"@exception"      { Exception },
    sym"@field"          { fg = colors.fg_1 },
    sym"@float"          { Float },
    sym"@function"       { Function },
    sym"@function.builtin" { fg = colors.fg },
    sym"@function.macro" { Macro },
    sym"@include"        { Include },
    sym"@keyword"        { Keyword },
    sym"@keyword.function" { fg = colors.orange },
    sym"@keyword.operator" { fg = colors.red },
    sym"@label"          { Label },
    sym"@method"         { Function },
    sym"@namespace"      { fg = colors.fg },
    sym"@number"         { Number },
    sym"@operator"       { Operator },
    sym"@parameter"      { fg = colors.fg_1 },
    sym"@parameter.reference" { fg = colors.fg_2 },
    sym"@property"       { fg = colors.blue_bright },
    sym"@punctuation.bracket" { Delimiter },
    sym"@punctuation.delimiter" { Delimiter },
    sym"@punctuation.special" { SpecialChar },
    sym"@repeat"         { Repeat },
    sym"@string"         { String },
    sym"@string.escape"  { SpecialChar },
    sym"@string.regex"   { fg = colors.yellow },
    sym"@string.special" { SpecialChar },
    sym"@symbol"         { fg = colors.orange },
    sym"@tag"            { Tag },
    sym"@tag.attribute"  { fg = colors.green_dim },
    sym"@tag.delimiter"  { Delimiter },
    sym"@text"           { fg = colors.fg_1 },
    sym"@text.strong"    { Bold },
    sym"@text.emphasis"  { Italic },
    sym"@text.underline" { Underlined },
    sym"@text.strike"    { gui = "strikethrough" },
    sym"@text.title"     { Title },
    sym"@text.literal"   { fg = colors.fg_2 },
    sym"@text.uri"       { Underlined, fg = colors.blue_bright },
    sym"@text.todo"      { Todo },
    sym"@text.note"      { fg = colors.blue_accent },
    sym"@text.orangeing"   { fg = colors.orange },
    sym"@text.danger"    { fg = colors.red },
    sym"@type"           { Type },
    sym"@type.builtin"   { fg = colors.fg },
    sym"@variable"       { fg = colors.fg_1 },
    sym"@variable.builtin" { fg = colors.purple },
    sym"@lsp.type.comment" { Comment },
    sym"@lsp.type.enum" { Type },
    sym"@lsp.type.enumMember" { Constant },
    sym"@lsp.type.function" { Function },
    sym"@lsp.type.interface" { Type },
    sym"@lsp.type.keyword" { Keyword },
    sym"@lsp.type.namespace" { sym"@namespace" },
    sym"@lsp.type.parameter" { sym"@parameter" },
    sym"@lsp.type.property" { sym"@property" },
    sym"@lsp.type.struct" { Structure },
    sym"@lsp.type.type" { Type },
    sym"@lsp.type.typeParameter" { Type },
    sym"@lsp.type.variable" { sym"@variable" },
    DiagnosticError { fg = colors.red },
    DiagnosticWarning  { fg = colors.orange },
    DiagnosticInfo  { fg = colors.blue_bright },
    DiagnosticHint  { fg = colors.green_bright },
    DiagnosticVirtualTextError { fg = colors.red.li(0), bg = colors.red.de(60).da(80) },
    DiagnosticVirtualTextWarning  { fg = colors.orange,  bg = colors.orange.de(80).da(75) },
    DiagnosticVirtualTextInfo  { fg = colors.blue_bright,  bg = colors.blue_bright.de(10).da(85) },
    DiagnosticVirtualTextHint  { fg = colors.green_bright,  bg = colors.green_bright.de(80).da(80) },
    DiagnosticUnderlineError { sp = colors.red, undercurl = true },
    DiagnosticUnderlineorange  { sp = colors.orange,  undercurl = true },
    DiagnosticUnderlineInfo  { sp = colors.blue_bright,  undercurl = true },
    DiagnosticUnderlineHint  { sp = colors.green_bright,  undercurl = true },
    -- Neovim specific
    healthError   { fg = colors.red },
    healthSuccess { fg = colors.green_bright },
    healthWarning { fg = colors.orange },
    -- Git highlighting
    gitcommitComment        { Comment },
    gitcommitUntracked      { Comment },
    gitcommitDiscarded      { Comment },
    gitcommitSelected       { Comment },
    gitcommitHeader         { fg = colors.green_bright },
    gitcommitSelectedType   { fg = colors.orange },
    gitcommitUnmergedType   { fg = colors.orange },
    gitcommitDiscardedType  { fg = colors.orange },
    gitcommitBranch         { fg = colors.orange, gui = "bold" },
    gitcommitUntrackedFile  { fg = colors.orange },
    gitcommitUnmergedFile   { fg = colors.red, gui = "bold" },
    gitcommitDiscardedFile  { fg = colors.red, gui = "bold" },
    gitcommitSelectedFile   { fg = colors.green_bright, gui = "bold" },
    ---------------------------
    -- NvimTree (Everforest-like)
    ---------------------------
    NvimTreeNormal          { bg = colors.bg_0 },
    NvimTreeCursorLine      { bg = colors.bg_2 },
    NvimTreeRootFolder      { fg = colors.green_bright, gui = "bold" },
    NvimTreeGitDirty        { fg = colors.orange },
    NvimTreeGitNew          { fg = colors.green_bright },
    NvimTreeGitDeleted      { fg = colors.red },
    NvimTreeSpecialFile     { fg = colors.fg, gui = "underline" },
    NvimTreeIndentMarker    { fg = colors.fg_3 },
    NvimTreeImageFile       { fg = colors.blue_bright },
    NvimTreeSymlink         { fg = colors.orange },
    NvimTreeFolderName      { fg = colors.blue_bright },

    --------------
    -- Telescope
    --------------
    TelescopeNormal         { bg = colors.bg, fg=colors.fg_2.li(50)},
    TelescopeBorder         { fg = colors.fg_1 },
    TelescopePromptBorder   { fg = colors.green_bright },
    TelescopeResultsBorder  { fg = colors.fg_1 },
    TelescopePreviewBorder  { fg = colors.fg_1 },
    TelescopeMatching       { fg = colors.fg_0.li(100), gui = "bold" },
    TelescopePromptPrefix   { fg = colors.green_bright },
    TelescopeSelection      { bg = colors.bg_3, fg = colors.fg_1.li(60), bui="italic"},
    -------------
    -- Which key
    -------------
    WhichKey                { fg = colors.fg, bg=colors.bg_0},
    WhichKeyGroup           { fg = colors.blue_bright, bg=colors.bg_0},
    WhichKeyDesc            { fg = colors.green_bright, bg=colors.bg_0},
    WhichKeySeperator       { fg = colors.fg_2 },
    WhichKeySeparator       { fg = colors.fg_2, bg=colors.bg_0},
    WhichKeyFloat           { bg = colors.bg_1 },
    WhichKeyBorder          { fg=colors.fg_0},
    WhichKeyValue           { fg = colors.fg_2 },
    -- Indent Blankline
    IndentBlanklineChar     { fg=colors.fg_2},
    IndentBlanklineContextChar { fg = colors.fg_2 },
    -- Dashboard
    DashboardHeader         { fg = colors.blue_bright },
    DashboardCenter         { fg = colors.orange },
    DashboardShortcut       { fg = colors.green_bright },
    DashboardFooter         { fg = colors.blue_accent },
    -- BufferLine
    BufferLineFill          { bg = colors.bg },
    BufferLineBackground    { bg = colors.bg, fg = colors.fg_1 },
    BufferLineBufferSelected { bg = colors.bg_1, fg = colors.green_bright, gui = "bold" },
    BufferLineModified      { fg = colors.orange },
    BufferLineModifiedSelected { fg = colors.fg },
    -- Gitsigns
    GitSignsAdd             { fg = colors.green_dim },
    GitSignsChange          { fg = colors.blue_dim },
    GitSignsDelete          { fg = colors.red },
    -- Hop
    HopNextKey              { fg = colors.fg, gui = "bold" },
    HopNextKey1             { fg = colors.orange,    gui = "bold" },
    HopNextKey2             { fg = colors.orange },
    HopUnmatched            { fg = colors.fg_3 },
    -- Cmp
    CmpItemAbbr             { fg = colors.fg_1 },
    CmpItemAbbrDeprecated   { fg = colors.fg_3, gui = "strikethrough" },
    CmpItemAbbrMatch        { fg = colors.fg, gui = "bold" },
    CmpItemAbbrMatchFuzzy   { fg = colors.orange },
    CmpItemKind             { fg = colors.blue_bright },
    CmpItemMenu             { fg = colors.fg_2 },
    IlluminatedWordText     { bg = colors.bg_3 },
    IlluminatedWordRead     { bg = colors.bg_3 },
    IlluminatedWordWrite    { bg = colors.bg_3 },
    DropBarCurrentContext   { bg = colors.bg_3 },
}
end)

-- Return our parsed theme for extension or use elsewhere.
return theme
